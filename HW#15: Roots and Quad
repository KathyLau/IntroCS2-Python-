#Kathy Lau
#IntroCS2 pd9
#HW#15: The Handoff 
#2015-03-10

import math

#Discriminant
def disc(a,b,c):
    return b**2 - 4*a*c
      
# numRealRoots takes numeric inputs a, b, c -- representing coefficients of a quadratic equation ;it returns the number of real roots of the equation.

def numRealRoots(a,b,c):
    if disc(a,b,c) > 0:
        return 2
    elif disc(a,b,c) == 0:
        return 1
    else:
        return 0
print numRealRoots(1,2,3) #0
print numRealRoots(2,4,2) #1
print numRealRoots(1,3,2) #2

#quadSolver prints the roots, if any. It uses numRealRoots(a,b,c) as a helper function.

def quadSolver(a,b,c):
    discSqrt = math.sqrt(abs(disc(a,b,c)))
    if numRealRoots(a,b,c) == 0:
        print "no real roots"
    elif numRealRoots(a,b,c) == 1:
        x =-b/(2*a)
        print x
    else:
        x1 = (-b+discSqrt)/(2*a)
        x2 = (-b-discSqrt)/(2*a)
        print x1, x2


quadSolver(1,2,3) #no real roots
quadSolver(1,4,4) #-2
quadSolver(1,-2,-15) #-3,5


### QUADSOLVER THAT TAKES INPUTS ###

def quadSolver_coolWay():
    a = input("Enter coefficient a: ")
    b = input("Enter coefficients b: ")
    c = input("Enter coefficients c: ")
    if numRealRoots(a,b,c) == 0:
        print "No real roots"
    elif numRealRoots(a,b,c) == 1:
        x =-b/(2*a)
        print "Only one solution: ", x
    else:
        discSqrt = math.sqrt(abs(disc(a,b,c)))
        x1 = (-b+discSqrt)/(2*a)
        x2 = (-b-discSqrt)/(2*a)
        print "The two solutions can be", x1, "and/or", x2

quadSolver_coolWay()
